## Statistical Modeling with `statsmodels`

This section was written by Leon Nguyen.

### Introduction

Hello! My name is Leon Nguyen (they/she) and I am a second-year undergraduate 
student studying Statistical Data Science and Mathematics at the University 
of Connecticut, aiming to graduate in Fall 2025. One of my long-term goals is to 
make the field of data science more accessible to marginalized communities and 
minority demographics. My research interests include statistical modeling, 
data visualization, and design. Statistical modeling is one of the most 
fundamental skills required for data science, and it's important to have a solid 
understanding of how models work to communicate effectively with collaborators. 

The `statsmodels` Python package offers a diverse range of classes and functions 
tailored for estimating various statistical models, conducting statistical tests, 
and exploring statistical data. Each estimator provides an extensive array of 
result statistics, rigorously tested against established statistical packages to 
ensure accuracy. This presentation will focus on the practical applications of the 
statistical modeling aspect.

### Key Features and Capabilities

Some of the most important key features and capabilities of `statsmodels` are:

+ Statistical Analysis
+ Linear Regression Models
+ Generalized Linear Models
+ Multi-level models 
+ Time Series Analysis
+ Nonparametric models

In this presentation, we will work with practical applications of statistical 
modeling in `statsmodels`. We will start with simple linear regression  
models and gradually move on to more complex models. By the end of this  
presentation, you should be able to understand and utilize these tools when 
applicable to analyze your own datasets. 

### Installation and Setup

To install `statsmodels`, use the following code, depending on whether you are 
using pip or conda: 
```{python}
%pip install statsmodels
```

```{python}
%conda install statsmodels
```

One of the major benefits of using `statsmodels` is their compatability with 
other commnonly used packages, such as `NumPy`, `SciPy`, and `Pandas`. 
These packages provide foundational scientific computing functionalities that  
are crucial for working with `statsmodels`. To ensure everything is set up  
correctly, import the necessary libraries at the beginning of your script:

```{python}
import numpy as np
import pandas as pd
import statsmodels.api as sm
```

Here are some minimum dependencies:

+ Python >= 3.8
+ NumPy >= 1.18
+ SciPy >= 1.4
+ Pandas >= 1.0
+ Patsy >= 0.5.2

The last item listed above, `patsy`, is a Python library that provides a simple 
and expressive syntax for specifying statistical models in Python. It allows 
users to define linear models using a formula syntax similar to the formulas 
used in R and other statistical software. More `patsy` documentation can be 
found [here](https://patsy.readthedocs.io/en/latest/).

Cython is required to build from a git checkout but not to run or install from 
PyPI. The documentation states this required to build the code from github but 
not from a source distribution:

+ Cython >= 0.29.33 

### Importing Data

There are a few different options to import data. For example, `statsmodels` 
documentation demonstrates how to importing from a CSV file hosted online from 
the [Rdatasets repository](https://github.com/vincentarelbundock/Rdatasets/):

```{python}
df = sm.datasets.get_rdataset("Guerry", "HistData").data
# Reads the 'Guerry' dataset from the HistData package into df
```

We can also read directly from a local CSV file with `pandas`. We will be using 
the NYC 311 rodent data:
```{python}
df = pd.read_csv('data\\rodent_2022-2023.csv')
# Reads the csv file into df
```

### Troubleshooting

Whenever you are having problems with `statsmodels`, you can access the  
official documentation by visiting [this link](https://www.statsmodels.org/stable/index.html). If you are working in a code editor, you can also run the following in a code cell:
```{python}
sm.webdoc() 
# Opens the official documentation page in your browser
```

To look for specific documentation, for example `sm.GLS`, you can run the following:
```{python}
sm.webdoc(sm.GLS, stable=True)
# First argument (func) : string* or function to search for documentation 
# Second argument (stable) : (True) or development (False) documentation, default is stable

# *Searching via string has presented issues?
```

### Statistical Modeling and Analysis

Constructing statistical models with `statsmodels` generally follows step-by-step 
process: 

1. **Import necessary libraries**: This includes both `numpy` and `pandas`, as well  
as `statsmodels.api` itself (`sm`).

1. **Load** the data: 

1. **Define** our model: what model is the appropriate representation of our 
   research question? This could be an OLS regression (`sm.OLS`), logistic 
   regression (`sm.Logit`), or any number of other models depending on the 
   nature of our data.
   
1. **Fit** the model to our data: we use the `.fit()` method which takes as input 
   our dependent variable and independent variables.
   
1. **Analyze** the results of the model: this is where we can get things like 
   parameter estimates, standard errors, p-values, etc. We use the 
   `.summary()` method to print out these statistics.

#### Linear Regression Models

Here's an example of fitting a simple linear regression model to the NYC rodent data:



```{python}
model = sm.OLS(df['count'], sm.add_constant(df['year']))
results = model.fit()
print(results.summary())
# Fits a linear regression model between count and year, with a constant term
```

This will give us a summary of the regression coefficients including their standard error, t-statistics, and p-values. The output also includes

Note that in addition to 'year', there's also a constant term included by           
default. The `add_constant()` function from statsmodels helps us add this. 

Let's demonstrate with an example using the Generalized Least Squares (GLS)      estimator:
```{python}
model = sm.GLS.from_formula('mpg ~ cyl + hp', data=auto)
results = model.fit()
print(results.summary())
```

#### Generalized Linear Models

#### Time Series Analysis

#### Nonparametric Models

#### Diagnostic Tests

The diagnostics tests allow us to check if our model assumptions hold true. One 
of the most important assumption of linear regression models is that residuals 
are normally distributed.


### Conclusion

Put summaries

### References

* Installing `statsmodels`:
    + https://www.statsmodels.org/stable/install.html

* `Rdatasets` repository:
    + https://github.com/vincentarelbundock/Rdatasets/

* Getting help with `statsmodels`:
    + https://www.statsmodels.org/stable/generated/statsmodels.tools.web.webdoc.html#statsmodels.tools.web.webdoc

* Loading data, model fit, and summary procedure:
    + https://www.statsmodels.org/stable/gettingstarted.html

* Diagnostic tests:
    + https://www.statsmodels.org/stable/stats.html#residual-diagnostics-and-specification-tests

* NYC 311 Service Request Data:
    + https://data.cityofnewyork.us/Social-Services/311-Service-Requests-from-2010-to-Present/erm2-nwe9/about_data

